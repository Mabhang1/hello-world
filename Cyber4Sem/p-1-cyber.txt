Aim:Write a program to implement following: 
A)Chinese Reminder Theorem 
B)Fermat’s Little Theorem 


Theory:
Chinese Remainder Theorem:
The Chinese Remainder Theorem is a theorem in number theory that describes the solution to a system of simultaneous congruences. It states that if you have a system of congruences with pairwise relatively prime moduli, then there exists a unique solution modulo the product of those moduli.

   Example:
   Let's say we want to find the smallest non-negative integer x that satisfies:
   x mod 3) 
   x (mod 5)

   Using CRT, we can solve this system of congruences:
   - We find that x mod 15) satisfies both congruences.

Source Code:
// A Java program to demonstrate the working of Chinese remainder 
// Theorem 
import java.io.*; 

class ChineseRemainder { 
	
	// k is size of num[] and rem[]. Returns the smallest 
	// number x such that: 
	// x % num[0] = rem[0], 
	// x % num[1] = rem[1], 
	// .................. 
	// x % num[k-2] = rem[k-1] 
	// Assumption: Numbers in num[] are pairwise coprime 
	// (gcd for every pair is 1) 
	static int findMinX(int num[], int rem[], int k) 
	{ 
		int x = 1; // Initialize result 
	
		// As per the Chinese remainder theorem, 
		// this loop will always break. 
		while (true) 
		{ 
			// Check if remainder of x % num[j] is 
			// rem[j] or not (for all j from 0 to k-1) 
			int j; 
			for (j=0; j<k; j++ ) 
				if (x%num[j] != rem[j]) 
				break; 
	
			// If all remainders matched, we found x 
			if (j == k) 
				return x; 
	
			// Else try next number 
			x++; 
		} 
	
	} 
	
	// Driver method 
	public static void main(String args[]) 
	{ 
		int num[] = {3, 4, 5}; 
		int rem[] = {2, 3, 1}; 
		int k = num.length; 
		System.out.println("4701-Abhang Mane"); 
		System.out.println("*****Chinese Remainder Theorem*****"); 
		System.out.println("x = " + findMinX(num, rem, k)); 
	} 
} 


Output:


Fermat’s Little Theorem:
Fermat's Little Theorem states that if  p  is a prime number and  a is an integer not divisible by  p, then a^(p-1)  1(mod p).

   Example:
   Let's take p = 7 and a = 3.
   According to Fermat's Little Theorem,3^6  1(mod 7).
   And indeed, 3^6 = 729, which is congruent to 1 modulo 7.
Source Code:
// Java program to find modular
// inverse of a under modulo m
// using Fermat's little theorem.
// This program works only if m is prime.

class FermatTheorem {
	static int __gcd(int a, int b)
	{

		if (b == 0) {
			return a;
		}
		else {
			return __gcd(b, a % b);
		}
	}

	// To compute x^y under modulo m
	static int power(int x, int y, int m)
	{
		if (y == 0)
			return 1;
		int p = power(x, y / 2, m) % m;
		p = (p * p) % m;

		return (y % 2 == 0) ? p : (x * p) % m;
	}

	// Function to find modular
	// inverse of a under modulo m
	// Assumption: m is prime
	static void modInverse(int a, int m)
	{
		if (__gcd(a, m) != 1)
			System.out.print("Inverse doesn't exist");

		else {

			// If a and m are relatively prime, then
			// modulo inverse is a^(m-2) mode m
			System.out.print(
				"Modular multiplicative inverse is "
				+ power(a, m - 2, m));
		}
	}

	// Driver code
	public static void main(String[] args)
	{
	    System.out.println("4701-Abhang Mane");
	    System.out.println("****Fermat's Little Theorem****");
		int a = 3, m = 11;
		modInverse(a, m);
	}
}


Output:



Conclusion: Hence Chinese Remainder theorem and Fermat’s Little theorem were implemented successfully.

























